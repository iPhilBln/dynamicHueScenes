<xml xmlns="https://developers.google.com/blockly/xml">
  <variables>
    <variable id="[AQNu:tV)BOiA{4uVd-$">directory</variable>
    <variable id="C8P(c}L/`UDl+2n1578u">Group_ID</variable>
    <variable id="E/|C(KrDZ51.X(^%I4gT">download_scenes</variable>
  </variables>
  <block type="procedures_defcustomnoreturn" id="[UxbBUe+j%v1r1trn@Hg" x="-938" y="-1562">
    <mutation statements="false">
      <arg name="directory" varid="[AQNu:tV)BOiA{4uVd-$"></arg>
      <arg name="Group_ID" varid="C8P(c}L/`UDl+2n1578u"></arg>
      <arg name="download_scenes" varid="E/|C(KrDZ51.X(^%I4gT"></arg>
    </mutation>
    <field name="NAME">initialization</field>
    <field name="SCRIPT"></field>
    <comment pinned="false" h="80" w="160">Beschreibe diese Funktion …</comment>
  </block>
  <block type="procedures_callcustomnoreturn" id="KiGL1^YCsDNum[Yc=jlP" x="-938" y="-1512">
    <mutation name="initialization">
      <arg name="directory"></arg>
      <arg name="Group_ID"></arg>
      <arg name="download_scenes"></arg>
    </mutation>
    <value name="ARG0">
      <block type="text" id="$lzwLGi;/hY40u2,o:,p">
        <field name="TEXT">0_userdata.0.licht.debug</field>
      </block>
    </value>
    <value name="ARG1">
      <block type="text" id="D(Jt*(PJ9uz$uny:g/h]">
        <field name="TEXT">Schlafzimmer</field>
      </block>
    </value>
    <value name="ARG2">
      <block type="logic_boolean" id="-`B=0#y6fXQK3]LLv|w{">
        <field name="BOOL">TRUE</field>
      </block>
    </value>
  </block>
</xml>
